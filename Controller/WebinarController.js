const WebinarRegistration = require('../Model/WebinarModel');
const nodemailer = require('nodemailer');

// Configure Titan Email transporter
const transporter = nodemailer.createTransport({
  host: 'smtp.titan.email',
  port: 587,
  secure: false,
  auth: {
    user: "info@scovers.org",
    pass: "Scoversedu1@"
  }
});

module.exports.registerForWebinar = async (req, res) => {
  try {
    const { fullName, email, phoneNumber, preferredCourse, preferredCountry } = req.body;

    // Save registration to database
    const registration = await WebinarRegistration.create({
      fullName,
      email,
      phoneNumber,
      preferredCourse,
      preferredCountry
    });

    // Create HTML email template
    const mailOptions = {
      from: '"Scovers Education" <info@scovers.org>',
      to: 'info@scovers.org', // Your receiving email
      subject: `New Webinar Registration: ${fullName}`,
      html: `
      <!DOCTYPE html>
      <html>
      <head>
          <style>
              body {
                  font-family: Arial, sans-serif;
                  line-height: 1.6;
                  color: #333;
                  max-width: 600px;
                  margin: 0 auto;
                  padding: 20px;
              }
              .header {
                  background-color: #2D8CD4;
                  color: white;
                  padding: 20px;
                  text-align: center;
                  border-radius: 5px 5px 0 0;
              }
              .content {
                  padding: 20px;
                  background-color: #f9f9f9;
                  border-radius: 0 0 5px 5px;
              }
              .detail-row {
                  margin-bottom: 15px;
              }
              .detail-label {
                  font-weight: bold;
                  color: #2D8CD4;
              }
              .footer {
                  margin-top: 20px;
                  text-align: center;
                  font-size: 12px;
                  color: #777;
              }
          </style>
      </head>
      <body>
          <div class="header">
              <h2>New Webinar Registration</h2>
          </div>
          <div class="content">
              <div class="detail-row">
                  <span class="detail-label">Full Name:</span> ${fullName}
              </div>
              <div class="detail-row">
                  <span class="detail-label">Email:</span> ${email}
              </div>
              <div class="detail-row">
                  <span class="detail-label">Phone Number:</span> ${phoneNumber}
              </div>
              <div class="detail-row">
                  <span class="detail-label">Preferred Course:</span> ${preferredCourse || 'Not specified'}
              </div>
              <div class="detail-row">
                  <span class="detail-label">Preferred Country:</span> ${preferredCountry || 'Not specified'}
              </div>
          </div>
          <div class="footer">
              <p>This email was automatically generated by Scovers Education webinar registration system.</p>
              <p>Registration received at: ${new Date().toLocaleString()}</p>
          </div>
      </body>
      </html>
      `
    };

    // Send email
    await transporter.sendMail(mailOptions);

    res.status(201).json({
      success: true,
      message: 'Registration successful',
      data: registration
    }); 
  } catch (error) {
    console.error('Webinar registration error:', error);
    res.status(500).json({
      success: false,
      message: 'Registration failed',
      error: error.message
    });
  }
};

module.exports.getWebinarRegistrations = async (req, res) => {
  try {
    const registrations = await WebinarRegistration.find().sort({ createdAt: -1 });
    res.status(200).json({
      success: true,
      count: registrations.length,
      data: registrations
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: 'Failed to fetch Webinar registrations',
      error: error.message
    });
  }
};



















// const WebinarRegistration = require('../Model/WebinarModel');
// const nodemailer = require('nodemailer');
// const { v4: uuidv4 } = require('uuid');
 

 
// // Configure Titan Email transporter
// const transporter = nodemailer.createTransport({
//   host: 'smtp.titan.email',
//   port: 587,
//   secure: false, // true for 465, false for other ports
// //   auth: {
// //     user: process.env.TITAN_EMAIL_USER,
// //     pass: process.env.TITAN_EMAIL_PASSWORD
// //   }
//   auth: {
//     user: "info@scovers.org", // Your Titan email
//     pass: "Scoversedu1@", // Your Titan email password
// },
// });

// module.exports.registerForWebinar = async (req, res) => {
//   try {
//     const { fullName, email, phoneNumber, preferredCourse, preferredCountry } = req.body;

//     // Save registration to database
//     const registration = await WebinarRegistration.create({
//       fullName,
//       email,
//       phoneNumber,
//       preferredCourse,
//       preferredCountry
//     });

    


//     res.status(201).json({
//       success: true,
//       message: 'Registration successful',
//       data: registration
//     }); 
//   } catch (error) {
//     console.error('Webinar registration error:', error);
//     res.status(500).json({
//       success: false,
//       message: 'Registration failed',
//       error: error.message
//     });
//   }
// };





// module.exports.getWebinarRegistrations = async (req, res) => {
//   try {
//     const registrations = await WebinarRegistration.find().sort({ createdAt: -1 });
//     res.status(200).json({
//       success: true,
//       count: registrations.length,
//       data: registrations
//     });
//   } catch (error) {
//     res.status(500).json({
//       success: false,
//       message: 'Failed to fetch Webinar registrations',
//       error: error.message
//     });
//   }
// };









// // //////////////// WE WILL PUT THIS FEATURE WHEN ITS TIME
// // <a href="https://admin.scovers.org/webinars/${webinarId}/registrations" class="action-button">
// //   View All Registrations
// // </a>